let express,request,response,cors,ApolloServer,gql,typeDefs,resolvers;_b12‍.w("express",[["default",["express"],function(v){express=v}],["request",["request"],function(v){request=v}],["response",["response"],function(v){response=v}]]);_b12‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_b12‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}],["gql",["gql"],function(v){gql=v}]]);_b12‍.w("./graphql/typeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);_b12‍.w("./graphql/resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);






async function startApolloServer() {

    const server = new ApolloServer({
        typeDefs,
        resolvers,
    });

    await server.start();

    const app = express();
    server.applyMiddleware({
        app,
        /*cors: {
            origin: 'http://localhost:8000',
        }*/
        bodyParserConfig: true,
    });

    const PORT = process.env.PORT ? parseInt(process.env.PORT) : 8000;
    const HOSTNAME = process.env.HOSTNAME || '127.0.0.1';

    await new Promise(resolve => app.listen({ port: PORT }, resolve));
    console.log(`🚀 Server ready at http://${HOSTNAME}:${PORT}${server.graphqlPath}`);
    return { server, app };
}

startApolloServer();
